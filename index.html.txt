<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Calculadora</title>
  <style>
    :root {
      --bg: #0f172a;      /* slate-900 */
      --panel: #111827;   /* gray-900 */
      --screen: #0b1020;
      --text: #e5e7eb;    /* gray-200 */
      --muted: #9ca3af;   /* gray-400 */
      --accent: #22c55e;  /* green-500 */
      --accent-2: #3b82f6;/* blue-500 */
      --danger: #ef4444;  /* red-500 */
      --key: #1f2937;     /* gray-800 */
      --key-2: #111827;   /* gray-900 */
      --shadow: 0 10px 30px rgba(0,0,0,.35);
      --radius: 16px;
    }

    * { box-sizing: border-box; }
    html, body {
      height: 100%;
      margin: 0;
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
      background: radial-gradient(1200px 800px at 70% -20%, #1f2937 0%, #0b1020 45%, var(--bg) 100%);
      color: var(--text);
    }

    .wrap {
      min-height: 100%;
      display: grid;
      place-items: center;
      padding: 24px;
    }

    .calc {
      width: 100%;
      max-width: 380px;
      background: linear-gradient(180deg, var(--panel), #0b1224 60%, var(--panel));
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      border: 1px solid rgba(255,255,255,.06);
      overflow: hidden;
    }

    .topbar {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 12px 14px;
      background: rgba(255,255,255,.02);
      border-bottom: 1px solid rgba(255,255,255,.06);
    }
    .dot {
      width: 10px; height: 10px; border-radius: 50%;
    }
    .dot.red { background: #ff5f57; }
    .dot.yellow { background: #febc2e; }
    .dot.green { background: #28c840; }
    .title {
      margin-left: auto;
      font-size: 12px;
      color: var(--muted);
      letter-spacing: .04em;
    }

    .screen {
      padding: 18px 16px 6px;
      display: grid;
      gap: 6px;
      background: linear-gradient(180deg, rgba(255,255,255,.02), rgba(255,255,255,0));
    }
    .history, .expr, .result {
      font-variant-numeric: tabular-nums;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    .history {
      min-height: 20px;
      color: var(--muted);
      font-size: 12px;
    }
    .expr {
      min-height: 28px;
      font-size: 18px;
      color: #cbd5e1; /* slate-300 */
    }
    .result {
      min-height: 40px;
      font-size: 34px;
      line-height: 1.1;
      text-align: right;
      padding: 8px 6px;
      background: var(--screen);
      border-radius: 12px;
      border: 1px solid rgba(255,255,255,.06);
      box-shadow: inset 0 0 0 9999px rgba(255,255,255,.01);
    }

    .keys {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 10px;
      padding: 14px;
    }

    button.key {
      appearance: none;
      border: 0;
      border-radius: 14px;
      padding: 16px 12px;
      font-size: 18px;
      color: var(--text);
      background: linear-gradient(180deg, var(--key), var(--key-2));
      border: 1px solid rgba(255,255,255,.06);
      box-shadow: 0 6px 16px rgba(0,0,0,.25), inset 0 1px 0 rgba(255,255,255,.04);
      cursor: pointer;
      transition: transform .05s ease, filter .15s ease;
      user-select: none;
    }
    button.key:active { transform: translateY(1px) scale(.995); }

    .op { background: linear-gradient(180deg, #1e293b, #0f172a); color: #c7d2fe; border-color: rgba(59,130,246,.25); }
    .accent { background: linear-gradient(180deg, #065f46, #064e3b); border-color: rgba(34,197,94,.35); }
    .blue { background: linear-gradient(180deg, #1e3a8a, #1e40af); border-color: rgba(59,130,246,.4); }
    .danger { background: linear-gradient(180deg, #7f1d1d, #991b1b); border-color: rgba(239,68,68,.4); }

    .span-2 { grid-column: span 2; }
    .equal { font-weight: 700; }

    .footer {
      text-align: center;
      color: var(--muted);
      font-size: 12px;
      padding: 8px 0 16px;
    }

    @media (max-width: 380px) {
      .result { font-size: 30px; }
      button.key { padding: 14px 10px; font-size: 17px; }
    }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="calc" role="application" aria-label="Calculadora">
      <div class="topbar" aria-hidden="true">
        <div class="dot red"></div>
        <div class="dot yellow"></div>
        <div class="dot green"></div>
        <div class="title">Calculadora</div>
      </div>

      <div class="screen">
        <div id="history" class="history" aria-live="polite"></div>
        <div id="expr" class="expr" aria-live="polite"></div>
        <div id="result" class="result" aria-live="polite" aria-atomic="true">0</div>
      </div>

      <div class="keys" role="group" aria-label="Teclas de la calculadora">
        <button class="key danger" data-action="clear" aria-label="Borrar todo (C)">C</button>
        <button class="key danger" data-action="back" aria-label="Borrar último (⌫)">⌫</button>
        <button class="key op" data-value="(" aria-label="Abrir paréntesis">(</button>
        <button class="key op" data-value=")" aria-label="Cerrar paréntesis">)</button>

        <button class="key" data-value="7">7</button>
        <button class="key" data-value="8">8</button>
        <button class="key" data-value="9">9</button>
        <button class="key op" data-value="/" aria-label="Dividir">÷</button>

        <button class="key" data-value="4">4</button>
        <button class="key" data-value="5">5</button>
        <button class="key" data-value="6">6</button>
        <button class="key op" data-value="*" aria-label="Multiplicar">×</button>

        <button class="key" data-value="1">1</button>
        <button class="key" data-value="2">2</button>
        <button class="key" data-value="3">3</button>
        <button class="key op" data-value="-" aria-label="Restar">−</button>

        <button class="key span-2" data-value="0">0</button>
        <button class="key" data-value="." aria-label="Decimal">.</button>
        <button class="key op" data-value="+" aria-label="Sumar">+</button>

        <button class="key blue span-2" data-action="percent" aria-label="Porcentaje">%</button>
        <button class="key accent equal span-2" data-action="equal" aria-label="Igual">=</button>
      </div>

      <div class="footer">Soporta teclado: 0–9, + − × ÷, Enter (=), Backspace (⌫), Esc (C)</div>
    </div>
  </div>

  <script>
    (function () {
      const exprEl = document.getElementById('expr');
      const resultEl = document.getElementById('result');
      const historyEl = document.getElementById('history');
      let expr = '';
      let lastResult = '0';

      const update = () => {
        exprEl.textContent = expr || ' ';
        resultEl.textContent = preview(expr);
      };

      const preview = (e) => {
        if (!e || /[+\-*/.(]$/.test(e)) return lastResult;
        try {
          const sanitized = sanitize(e);
          // Evita división por cero visible
          const val = Function('"use strict";return (' + sanitized + ')')();
          if (!isFinite(val)) return '∞';
          const out = formatNumber(val);
          return out;
        } catch {
          return lastResult;
        }
      };

      const formatNumber = (n) => {
        const str = Number(n.toFixed(12)).toString();
        // Muestra máximo 12 dígitos decimales útiles
        return str.length > 16 ? Number(n).toPrecision(12) : str;
      };

      const sanitize = (e) => {
        // solo dígitos, operadores básicos, punto y paréntesis
        // convierte % a "/100"
        const allowed = e.replace(/×/g, '*').replace(/÷/g, '/');
        if (!/^[0-9+\-*/().\s%]*$/.test(allowed)) throw new Error('invalid');
        // reemplaza porcentajes seguros (n% -> (n/100))
        return allowed.replace(/(\d+(?:\.\d+)?)%/g, '($1/100)');
      };

      const setHistory = (left, right) => {
        historyEl.textContent = left + ' =';
        resultEl.textContent = right;
      };

      const handleEqual = () => {
        if (!expr) return;
        try {
          const sanitized = sanitize(expr);
          const val = Function('"use strict";return (' + sanitized + ')')();
          lastResult = formatNumber(val);
          setHistory(expr, lastResult);
          expr = lastResult; // permite seguir operando con el resultado
        } catch {
          resultEl.textContent = 'Error';
        }
      };

      const handlePercent = () => {
        // Si termina en número, aplica % a ese número
        const m = expr.match(/(\d+(\.\d+)?)$/);
        if (m) {
          expr = expr.slice(0, -m[0].length) + `(${m[0]}/100)`;
          update();
        }
      };

      const handleKey = (value) => {
        // Evita operadores duplicados seguidos (excepto - para negativos tras un operador o inicio)
        const isOp = /[+\-*/]/.test(value);
        const last = expr.slice(-1);

        if (value === '.') {
          // Evita dos puntos en el mismo número
          const part = expr.split(/[^0-9.]/).pop();
          if (part.includes('.')) return;
        }

        if (isOp) {
          if (expr === '' && value !== '-') return; // no empieces con +,*,/
          if (/[+\-*/]/.test(last)) {
            // Reemplaza el operador anterior, excepto permitir "-"" tras * o / para negativo
            if ((last === '*' || last === '/') && value === '-') {
              // permitir 5* -3 -> 5*-3
            } else {
              expr = expr.slice(0, -1);
            }
          }
        }

        expr += value;
        update();
      };

      const handleBack = () => {
        expr = expr.slice(0, -1);
        update();
      };

      const handleClear = () => {
        expr = '';
        lastResult = '0';
        historyEl.textContent = '';
        resultEl.textContent = '0';
        exprEl.textContent = ' ';
      };

      document.querySelectorAll('button.key').forEach(btn => {
        btn.addEventListener('click', () => {
          const val = btn.getAttribute('data-value');
          const action = btn.getAttribute('data-action');

          if (action === 'equal') return handleEqual();
          if (action === 'back') return handleBack();
          if (action === 'clear') return handleClear();
          if (action === 'percent') return handlePercent();

          if (val) handleKey(val);
        });
      });

      // Soporte teclado
      window.addEventListener('keydown', (e) => {
        const k = e.key;

        if ((k >= '0' && k <= '9') || k === '.' || k === '(' || k === ')') {
          handleKey(k);
          e.preventDefault();
          return;
        }

        if (k === '+' || k === '-' || k === '*' || k === '/') {
          handleKey(k);
          e.preventDefault();
          return;
        }

        if (k === 'Enter' || k === '=') {
          handleEqual();
          e.preventDefault();
          return;
        }

        if (k === 'Backspace') {
          handleBack();
          e.preventDefault();
          return;
        }

        if (k === 'Escape') {
          handleClear();
          e.preventDefault();
          return;
        }

        if (k === '%') {
          handlePercent();
          e.preventDefault();
          return;
        }
      });

      // Inicial
      update();
    })();
  </script>
</body>
</html>
